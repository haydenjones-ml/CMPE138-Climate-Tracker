from google.cloud import bigquery
from google.oauth2 import service_account
import folium
import pandas
import json
import geopandas

def update_geojson_with_storm_data(geojson_path, storm_queries, bigquery_client):
    """
    Now that GeoJSON is initialized, we need to populate each county with a categorized
    count of every storm.
    Parameters: geojson_path: filepath generated by 'map.py' that has our boundaries for each
    county; storm_query: SQL Query that fetches our storm data from NOAA database

    Output: return json_data, that will populate each county
    """

    # Load GeoJSON
    with open(geojson_path, 'r') as geojson_file:
        json_data = json.load(geojson_file)

    # Execute each storm query and create a dictionary for counts
    storm_counts = {}
    for storm_type, query in storm_queries.items():

        # Run query with BigQuery client
        query_job = bigquery_client.query(query)  # Submit the query

        df = query_job.to_dataframe()  # Convert query results to a Pandas DataFrame

        # Convert DataFrame to dictionary with county as the key
        storm_counts[storm_type] = df.set_index('county')['storm_count'].to_dict()

    # Populate the GeoJSON with storm data
    for feature in json_data['features']:

        county_name = feature['properties']['NAME']  # Adjust this key if needed

        # Set storm counts for each type, default to 0 if no data available
        feature['properties']['rainstorm_count'] = storm_counts.get('rainstorm', {}).get(county_name, 0)
        feature['properties']['hailstorm_count'] = storm_counts.get('hailstorm', {}).get(county_name, 0)
        feature['properties']['hurricane_count'] = storm_counts.get('hurricane', {}).get(county_name, 0)

    print('Storm count of counties in JSON has been updated')

    return json_data

def create_map_with_updated_data(json_data, save_path):
    """
    GeoJSON Data now should contain every storm categorized by type and county, need to actually
    place them in each county. Refer to map.py for data population algorithm! Hint: Look into iloc
    in pandas, I can help out if needed as well
    Parameters: json_data: updated storm count after update_geojson_with_storm_data; save_path: temp
    storage path for our new dataframe/map

    Output: HTML file that contains county boundaries *and* new updated data per county
    """

"""
TODO: 
- Need to look into turning each county into a heatmap; should be possible with folium
- Slider/Dropdown member to re-query and update data and map
- .... to be continued
"""

if __name__ == "__main__":
    pth = "Resources/cmpe-138-project-443107-1ffe957e4627.json"  # Path to your service account credentials file
    cred = service_account.Credentials.from_service_account_file(pth)
    
    # Explicitly pass the project ID when creating the client
    client = bigquery.Client(credentials=cred, project="cmpe-138-project-443107")  # Make sure the project ID is correct
    
    # GeoJSON path
    geojson_path = "Resources/CA_Counties.json"

    storm_queries = {
          'rainstorm': "SELECT county, COUNT(*) AS storm_count FROM rainstorm_reports WHERE state = 'CA' GROUP BY county;",
          'hailstorm': "SELECT county, COUNT(*) AS storm_count FROM hail_reports WHERE state = 'CA' GROUP BY county;",
          'hurricane': "SELECT county, COUNT(*) AS storm_count FROM hurricane_reports WHERE state = 'CA' GROUP BY county;"
      }

    # Call the function
    updated_geojson = update_geojson_with_storm_data(geojson_path, storm_queries, client)
    print(updated_geojson)
